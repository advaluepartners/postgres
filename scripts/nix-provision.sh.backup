#!/usr/bin/env bash
# shellcheck shell=bash

set -o errexit
set -o pipefail
set -o xtrace

function install_packages {
	# Setup Ansible on host VM
	sudo apt-get update && sudo apt-get install software-properties-common -y
	sudo add-apt-repository --yes --update ppa:ansible/ansible && sudo apt-get install ansible -y
	ansible-galaxy collection install community.general
}

function install_nix() {
    sudo su -c "curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm \
    --extra-conf \"substituters = https://cache.nixos.org https://nix-postgres-artifacts.s3.amazonaws.com\" \
    --extra-conf \"trusted-public-keys = nix-postgres-artifacts:dGZlQOvKcNEjvT7QEAJbcV6b6uk7VF/hWMjhYleiaLI=% cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=\" \
    --extra-conf \"experimental-features = nix-command flakes\" " -s /bin/bash root
    . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
}

function setup_build_environment() {
    echo "=== Setting up optimized build environment ==="
    
    # Ensure build directory exists and is properly configured
    if [ -d "/tmp/nix-build" ]; then
        echo "Using build volume at /tmp/nix-build"
        export TMPDIR="/tmp/nix-build"
        export NIX_BUILD_TOP="/tmp/nix-build"
        
        # Create Nix-specific directories on build volume
        sudo mkdir -p /tmp/nix-build/nix-build-tmp
        sudo mkdir -p /tmp/nix-build/nix-store-tmp
        sudo chmod 777 /tmp/nix-build/nix-build-tmp
        sudo chmod 777 /tmp/nix-build/nix-store-tmp
        
        # Export additional Nix environment variables
        export NIX_BUILD_DIR="/tmp/nix-build/nix-build-tmp"
        
        echo "Build environment configured for external volume"
    else
        echo "No build volume available, using root filesystem"
        export TMPDIR="/tmp"
        export NIX_BUILD_TOP="/tmp"
    fi
    
    # Show disk usage before build
    echo "=== Disk usage before build ==="
    df -h
    
    # Configure Nix for optimized builds with aggressive space management
    export NIX_CONFIG="
      max-jobs = 4
      cores = 4
      sandbox = false
      keep-outputs = false
      keep-derivations = false
      auto-optimise-store = true
      min-free = 2147483648
      max-free = 4294967296
      compress-build-log = true
      show-trace = false
      warn-dirty = false
      build-fallback = false
      substitute = true
    "
    
    # Aggressive Rust build optimizations
    export CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG=false
    export CARGO_PROFILE_RELEASE_DEBUG=false
    export CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS=false
    export CARGO_PROFILE_RELEASE_OVERFLOW_CHECKS=false
    export RUSTDOC_DISABLE=1
    export RUST_DOCS_DISABLE=1
    export RUSTC_BOOTSTRAP=1
    
    # Disable Rust documentation globally
    export CARGO_PROFILE_DEV_BUILD_OVERRIDE_DEBUG=false
    export CARGO_BUILD_RUSTDOC=false
    
    echo "Build environment optimization complete"
}

function execute_stage2_playbook {
    echo "POSTGRES_MAJOR_VERSION: ${POSTGRES_MAJOR_VERSION}"
    echo "GIT_SHA: ${GIT_SHA} (using local flake)"
    echo "Build directory: ${TMPDIR}"
    
    # Setup build environment first
    setup_build_environment
    
    # Set up Nix daemon configuration for build optimization
    sudo tee /etc/nix/nix.conf <<EOF
max-jobs = 4
cores = 4
sandbox = false
keep-outputs = false
keep-derivations = false
auto-optimise-store = true
min-free = 2147483648
max-free = 4294967296
compress-build-log = true
show-trace = false
warn-dirty = false
build-dir = ${TMPDIR}/nix-build-tmp
EOF
    
    # Restart Nix daemon to pick up configuration
    sudo systemctl restart nix-daemon || echo "Nix daemon restart failed, continuing..."
    
    sudo tee /etc/ansible/ansible.cfg <<EOF
[defaults]
callbacks_enabled = timer, profile_tasks, profile_roles
EOF
    sed -i 's/- hosts: all/- hosts: localhost/' /tmp/ansible-playbook/ansible/playbook.yml

    # Monitor disk usage during build
    monitor_disk_usage() {
        while true; do
            sleep 300  # Check every 5 minutes
            echo "=== Disk usage check at $(date) ==="
            df -h
            
            # Clean up if getting low on space
            root_usage=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
            if [ "$root_usage" -gt 85 ]; then
                echo "WARNING: Root filesystem at ${root_usage}% - running cleanup"
                if command -v nix-collect-garbage >/dev/null 2>&1; then
                    nix-collect-garbage --delete-older-than 1d
                fi
                # Clean up temporary files
                sudo find /tmp -type f -atime +0 -delete 2>/dev/null || true
            fi
        done
    }
    
    # Start background disk monitoring
    monitor_disk_usage &
    MONITOR_PID=$!
    
    # Trap to clean up background process
    trap "kill $MONITOR_PID 2>/dev/null || true" EXIT
    
    # Run Ansible playbook with optimized settings
    export ANSIBLE_LOG_PATH=/tmp/ansible.log && export ANSIBLE_REMOTE_TEMP=/tmp
    ansible-playbook /tmp/ansible-playbook/ansible/playbook.yml \
        --extra-vars '{"nixpkg_mode": false, "stage2_nix": true, "debpkg_mode": false}' \
        --extra-vars "git_commit_sha=${GIT_SHA}" \
        --extra-vars "psql_version=psql_${POSTGRES_MAJOR_VERSION}" \
        --extra-vars "postgresql_version=postgresql_${POSTGRES_MAJOR_VERSION}" \
        --extra-vars "nix_secret_key=${NIX_SECRET_KEY}" \
        --extra-vars "postgresql_major_version=${POSTGRES_MAJOR_VERSION}" \
        $ARGS
        
    # Stop disk monitoring
    kill $MONITOR_PID 2>/dev/null || true
    
    echo "=== Final cleanup phase ==="
    
    # Aggressive cleanup of build artifacts
    if command -v nix-collect-garbage >/dev/null 2>&1; then
        echo "Running comprehensive Nix store cleanup..."
        nix-collect-garbage -d
        
        # Clean up any remaining store artifacts
        sudo find /nix/store -name "*.tmp" -delete 2>/dev/null || true
        sudo find /nix/store -name "*rust-docs*" -type d -exec rm -rf {} + 2>/dev/null || true
    fi
    
    # Clean up temporary build directories
    if [ -d "/tmp/nix-build" ] && [ "$TMPDIR" = "/tmp/nix-build" ]; then
        echo "Cleaning up temporary build directory..."
        sudo rm -rf /tmp/nix-build/nix-build-tmp/* 2>/dev/null || true
        sudo rm -rf /tmp/nix-build/nix-store-tmp/* 2>/dev/null || true
    fi
    
    # Final disk usage report
    echo "=== Final disk usage ==="
    df -h
}

function cleanup_packages {
    sudo apt-get -y remove --purge ansible
    sudo add-apt-repository --yes --remove ppa:ansible/ansible
    
    # Final cleanup
    sudo apt-get autoremove -y
    sudo apt-get autoclean
}

install_packages
install_nix
execute_stage2_playbook
cleanup_packages


# #!/usr/bin/env bash
# # shellcheck shell=bash

# set -o errexit
# set -o pipefail
# set -o xtrace

# function install_packages {
# 	# Setup Ansible on host VM
# 	sudo apt-get update && sudo apt-get install software-properties-common -y
# 	sudo add-apt-repository --yes --update ppa:ansible/ansible && sudo apt-get install ansible -y
# 	ansible-galaxy collection install community.general
# }

# function setup_nix_store_on_build_volume() {
#     echo "=== Setting up Nix store on build volume ==="
    
#     # Detect and mount build volume
#     for device in /dev/nvme1n1 /dev/nvme2n1 /dev/nvme3n1 /dev/xvdf /dev/sdf; do
#         if [ -b "$device" ]; then
#             echo "Found build device: $device"
            
#             # Aggressive unmounting with retries
#             echo "Unmounting $device..."
#             for i in {1..5}; do
#                 sudo umount "$device" 2>/dev/null || true
#                 sudo umount /tmp/nix-build 2>/dev/null || true
#                 sleep 1
#                 if ! mount | grep -q "$device"; then
#                     echo "Device unmounted successfully"
#                     break
#                 fi
#                 echo "Retry $i: Still mounted, trying again..."
#             done
            
#             # Force kill any processes using the mount point
#             sudo fuser -km /tmp/nix-build 2>/dev/null || true
#             sudo fuser -km "$device" 2>/dev/null || true
            
#             # Final unmount attempt
#             sudo umount -l "$device" 2>/dev/null || true  # lazy unmount
#             sudo umount -f "$device" 2>/dev/null || true  # force unmount
            
#             # Clear filesystem signatures to ensure clean format
#             sudo wipefs -a "$device" 2>/dev/null || true
            
#             # Wait a moment for kernel to update
#             sleep 2
            
#             # Format with force flag and no interaction
#             echo "Formatting $device..."
#             sudo mkfs.ext4 -F -q "$device"
            
#             # Mount and setup
#             sudo mkdir -p /tmp/nix-build
#             sudo mount "$device" /tmp/nix-build
#             sudo chmod 777 /tmp/nix-build
            
#             # CRITICAL: Move Nix store to build volume
#             sudo mkdir -p /tmp/nix-build/nix
#             sudo mkdir -p /tmp/nix-build/nix/store
#             sudo mkdir -p /tmp/nix-build/nix/var
            
#             # Create symlink so Nix uses build volume
#             if [ -d "/nix" ]; then
#                 sudo rm -rf /nix.backup || true
#                 sudo mv /nix /nix.backup || true
#             fi
#             sudo ln -sf /tmp/nix-build/nix /nix
            
#             echo "Nix store configured to use build volume at $device"
#             break
#         fi
#     done
    
#     df -h
# }

# function install_nix() {
#     setup_nix_store_on_build_volume
    
#     sudo su -c "curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm \
#     --extra-conf \"substituters = https://cache.nixos.org https://nix-postgres-artifacts.s3.amazonaws.com\" \
#     --extra-conf \"trusted-public-keys = nix-postgres-artifacts:dGZlQOvKcNEjvT7QEAJbcV6b6uk7VF/hWMjhYleiaLI=% cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=\" \
#     --extra-conf \"experimental-features = nix-command flakes\" " -s /bin/bash root
#     . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
# }

# function execute_stage2_playbook {
#     echo "POSTGRES_MAJOR_VERSION: ${POSTGRES_MAJOR_VERSION}"
#     echo "GIT_SHA: ${GIT_SHA}"
#     sudo tee /etc/ansible/ansible.cfg <<EOF
# [defaults]
# callbacks_enabled = timer, profile_tasks, profile_roles
# EOF
#     sed -i 's/- hosts: all/- hosts: localhost/' /tmp/ansible-playbook/ansible/playbook.yml

#     # Run Ansible playbook
#     export ANSIBLE_LOG_PATH=/tmp/ansible.log && export ANSIBLE_REMOTE_TEMP=/tmp
#     ansible-playbook /tmp/ansible-playbook/ansible/playbook.yml \
#         --extra-vars '{"nixpkg_mode": false, "stage2_nix": true, "debpkg_mode": false}' \
#         --extra-vars "git_commit_sha=${GIT_SHA}" \
#         --extra-vars "psql_version=psql_${POSTGRES_MAJOR_VERSION}" \
#         --extra-vars "postgresql_version=postgresql_${POSTGRES_MAJOR_VERSION}" \
#         --extra-vars "nix_secret_key=${NIX_SECRET_KEY}" \
#         --extra-vars "postgresql_major_version=${POSTGRES_MAJOR_VERSION}" \
#         $ARGS
# }

# function cleanup_packages {
#     sudo apt-get -y remove --purge ansible
#     sudo add-apt-repository --yes --remove ppa:ansible/ansible
# }

# install_packages
# install_nix
# execute_stage2_playbook
# cleanup_packages