#!/usr/bin/env bash
# scripts/nix-provision-enhanced.sh
# DEFINITIVE FIX: Work WITH Nix installer, manage space comprehensively

set -o errexit
set -o pipefail
set -o xtrace

# Enhanced logging
exec 1> >(tee -a /tmp/nix-provision.log)
exec 2>&1

# Global temporary directory management
export TMPDIR="/tmp/nix-build/system-tmp"
export NIX_BUILD_TOP="/tmp/nix-build"
export CARGO_TARGET_DIR="/tmp/nix-build/cargo-target"

# Cleanup handler
cleanup() {
    local exit_code=$?
    echo "=== Script cleanup, exit code: $exit_code ==="
    
    # Show final space usage
    echo "=== Final disk usage ==="
    df -h 2>/dev/null || echo "Cannot get disk usage"
    
    # Show largest directories in build area
    echo "=== Largest build directories ==="
    du -sh /tmp/nix-build/* 2>/dev/null | sort -hr | head -10 || echo "No build directories"
    
    exit $exit_code
}
trap cleanup EXIT INT TERM

function install_packages {
    echo "=== Installing required packages ==="
    sudo apt-get update && sudo apt-get install -y software-properties-common

    # Add Ansible repository
    for i in {1..3}; do
        if sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 93C4A3FD7BB9C367; then
            break
        fi
        echo "GPG key retrieval attempt $i failed, retrying..."
        sleep 5
    done

    sudo add-apt-repository --yes ppa:ansible/ansible
    sudo apt-get update
    sudo apt-get install -y ansible

    ansible --version || {
        echo "ERROR: Ansible installation failed"
        exit 1
    }

    ansible-galaxy collection install community.general
    echo "=== Package installation completed ==="
}

function setup_comprehensive_space_management {
    echo "=== Setting up comprehensive space management ==="
    
    # Ensure our build volumes are properly set up
    if ! mountpoint -q /tmp/nix-build; then
        echo "ERROR: Build volume not mounted at /tmp/nix-build"
        exit 1
    fi
    
    # Create comprehensive directory structure
    sudo mkdir -p /tmp/nix-build/{system-tmp,cargo-target,rust-builds,nix-sandbox}
    sudo chmod 1777 /tmp/nix-build/{system-tmp,cargo-target,rust-builds,nix-sandbox}
    
    # Set up system-wide temporary directory redirection
    echo "=== Configuring system-wide temporary directories ==="
    
    # Override system tmpdir for this session and all child processes
    export TMPDIR="/tmp/nix-build/system-tmp"
    export TMP="/tmp/nix-build/system-tmp"
    export TEMP="/tmp/nix-build/system-tmp"
    
    # Rust-specific environment variables
    export CARGO_TARGET_DIR="/tmp/nix-build/cargo-target"
    export CARGO_BUILD_TARGET_DIR="/tmp/nix-build/cargo-target"
    export RUST_BACKTRACE=1
    
    # Write environment configuration for Nix builds
    sudo tee /etc/environment.d/nix-build.conf <<EOF
TMPDIR="/tmp/nix-build/system-tmp"
TMP="/tmp/nix-build/system-tmp"
TEMP="/tmp/nix-build/system-tmp"
CARGO_TARGET_DIR="/tmp/nix-build/cargo-target"
CARGO_BUILD_TARGET_DIR="/tmp/nix-build/cargo-target"
NIX_BUILD_TOP="/tmp/nix-build"
EOF
    
    echo "=== Space management setup completed ==="
}

function install_nix_with_proper_config {
    echo "=== Installing Nix (letting installer manage /nix mount) ==="
    
    # Prepare the 60GB volume for Nix installer to use
    sudo mkfs.ext4 -F /dev/nvme2n1 2>/dev/null || echo "Volume already formatted"
    
    # Let the Nix installer mount at /nix (don't fight it)
    echo "Installing Nix with determinate installer..."
    
    # Create enhanced Nix configuration
    sudo mkdir -p /etc/nix
    sudo tee /etc/nix/nix.conf <<EOF
# Enhanced Nix configuration for large builds
max-jobs = 2
cores = 2
keep-outputs = false
keep-derivations = false
auto-optimise-store = true

# Use our large volume for build directories
build-dir = /tmp/nix-build/nix-sandbox
build-users-group = nixbld

# Enhanced substitution
substituters = https://cache.nixos.org https://nix-postgres-artifacts.s3.amazonaws.com
trusted-public-keys = nix-postgres-artifacts:dGZlQOvKcNEjvT7QEAJbcV6b6uk7VF/hWMjhYleiaLI=% cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

# Disk space management
min-free = 2147483648
max-free = 4294967296
EOF
    
    # Install Nix with the pre-formatted volume available
    if ! sudo su -c "curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm" -s /bin/bash root; then
        echo "ERROR: Nix installation failed"
        exit 1
    fi
    
    # The installer should now mount the 60GB volume at /nix
    echo "=== Verifying Nix installation and mount ==="
    
    # Source Nix environment
    set +o pipefail
    source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh 2>/dev/null || {
        echo "WARNING: Nix environment sourcing had issues, trying alternative..."
        . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh || true
    }
    set -o pipefail
    
    # Verify Nix installation
    timeout 30 nix-store --version || {
        echo "ERROR: Nix verification failed"
        exit 1
    }
    
    # Verify the 60GB volume is mounted at /nix
    if ! df -h | grep -q "/nix"; then
        echo "ERROR: /nix is not on a separate mount"
        exit 1
    fi
    
    echo "=== Nix installation and verification completed ==="
}

function configure_nix_for_large_builds {
    echo "=== Configuring Nix daemon for large builds ==="
    
    # Update Nix daemon configuration
    sudo systemctl stop nix-daemon || true
    
    # Enhance systemd service for better resource management
    sudo mkdir -p /etc/systemd/system/nix-daemon.service.d
    sudo tee /etc/systemd/system/nix-daemon.service.d/override.conf <<EOF
[Service]
Environment="TMPDIR=/tmp/nix-build/system-tmp"
Environment="TMP=/tmp/nix-build/system-tmp"
Environment="TEMP=/tmp/nix-build/system-tmp"
Environment="CARGO_TARGET_DIR=/tmp/nix-build/cargo-target"
Environment="NIX_BUILD_TOP=/tmp/nix-build"
LimitNOFILE=1048576
LimitNPROC=1048576
EOF
    
    sudo systemctl daemon-reload
    sudo systemctl start nix-daemon
    
    echo "=== Nix daemon configuration completed ==="
}

function execute_stage2_playbook {
    echo "=== Executing Stage 2 Ansible Playbook ==="
    echo "POSTGRES_MAJOR_VERSION: ${POSTGRES_MAJOR_VERSION}"
    echo "GIT_SHA: ${GIT_SHA}"
    
    # Configure Ansible
    sudo tee /etc/ansible/ansible.cfg <<EOF
[defaults]
callbacks_enabled = timer, profile_tasks, profile_roles
timeout = 30
retry_files_enabled = False
host_key_checking = False
EOF

    # Modify playbook for localhost execution
    sed -i 's/- hosts: all/- hosts: localhost/' /tmp/ansible-playbook/ansible/playbook.yml

    # Set up comprehensive environment for Ansible execution
    export ANSIBLE_LOG_PATH=/tmp/ansible.log
    export ANSIBLE_REMOTE_TEMP=/tmp
    export ANSIBLE_LOCAL_TEMP=/tmp
    
    # Comprehensive environment for Nix builds within Ansible
    export TMPDIR="/tmp/nix-build/system-tmp"
    export TMP="/tmp/nix-build/system-tmp"
    export TEMP="/tmp/nix-build/system-tmp"
    export CARGO_TARGET_DIR="/tmp/nix-build/cargo-target"
    export NIX_BUILD_TOP="/tmp/nix-build"
    
    echo "=== Environment for large builds ==="
    echo "TMPDIR=$TMPDIR"
    echo "CARGO_TARGET_DIR=$CARGO_TARGET_DIR"
    echo "NIX_BUILD_TOP=$NIX_BUILD_TOP"
    
    # Execute playbook with enhanced error handling and environment
    echo "=== Running Ansible playbook with enhanced environment ==="
    if ! env TMPDIR="/tmp/nix-build/system-tmp" \
           TMP="/tmp/nix-build/system-tmp" \
           TEMP="/tmp/nix-build/system-tmp" \
           CARGO_TARGET_DIR="/tmp/nix-build/cargo-target" \
           NIX_BUILD_TOP="/tmp/nix-build" \
           ansible-playbook /tmp/ansible-playbook/ansible/playbook.yml \
        --extra-vars '{"nixpkg_mode": false, "stage2_nix": true, "debpkg_mode": false}' \
        --extra-vars "git_commit_sha=${GIT_SHA}" \
        --extra-vars "psql_version=psql_${POSTGRES_MAJOR_VERSION}" \
        --extra-vars "postgresql_version=postgresql_${POSTGRES_MAJOR_VERSION}" \
        --extra-vars "nix_secret_key=${NIX_SECRET_KEY:-}" \
        --extra-vars "postgresql_major_version=${POSTGRES_MAJOR_VERSION}" \
        $ARGS; then
        echo "ERROR: Ansible playbook execution failed"
        echo "=== Ansible log tail ==="
        tail -50 /tmp/ansible.log 2>/dev/null || echo "No ansible log available"
        echo "=== Disk usage at failure ==="
        df -h
        echo "=== Build directory sizes ==="
        du -sh /tmp/nix-build/* 2>/dev/null || echo "No build directories"
        exit 1
    fi
    
    echo "=== Ansible playbook execution completed ==="
}

function cleanup_packages {
    echo "=== Cleaning up packages and artifacts ==="
    
    # Clean up build artifacts (but preserve the structure)
    echo "=== Cleaning up build artifacts ==="
    sudo rm -rf /tmp/nix-build/system-tmp/* 2>/dev/null || true
    sudo rm -rf /tmp/nix-build/cargo-target/* 2>/dev/null || true
    sudo rm -rf /tmp/nix-build/nix-sandbox/* 2>/dev/null || true
    
    # Clean up Nix store
    set +o errexit
    if command -v nix-collect-garbage >/dev/null 2>&1; then
        nix-collect-garbage -d 2>/dev/null || echo "WARNING: Nix garbage collection had issues"
    fi
    set -o errexit
    
    # Show final disk usage
    echo "=== Final disk usage ==="
    df -h 2>/dev/null || echo "Cannot get disk usage"
    
    # Clean up Ansible
    sudo apt-get -y remove --purge ansible 2>/dev/null || echo "WARNING: Ansible removal failed"
    sudo add-apt-repository --yes --remove ppa:ansible/ansible 2>/dev/null || echo "WARNING: PPA removal failed"
    
    echo "=== Package cleanup completed ==="
}

function monitor_disk_usage {
    echo "=== Disk usage monitoring ==="
    df -h 2>/dev/null || echo "Cannot get disk usage"
    echo "=== Build directory sizes ==="
    du -sh /tmp/nix-build/* 2>/dev/null | head -10 || echo "No build directories yet"
}

# Main execution flow
main() {
    echo "=== Starting enhanced Nix provisioning script ==="
    echo "=== Environment Variables ==="
    env | grep -E "(POSTGRES|GIT|NIX|TMP|CARGO)" || echo "No relevant environment variables found"
    
    install_packages
    setup_comprehensive_space_management
    install_nix_with_proper_config
    configure_nix_for_large_builds
    monitor_disk_usage
    execute_stage2_playbook
    monitor_disk_usage
    cleanup_packages
    
    echo "=== Enhanced Nix provisioning script completed successfully ==="
}

# Execute main function
main "$@"

