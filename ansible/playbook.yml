- hosts: all
  become: yes
  gather_facts: yes

  pre_tasks:
    - import_tasks: tasks/setup-system.yml
  vars_files:
    - ./vars.yml

  vars:
    sql_files:
      - {
          source: "pgbouncer_config/pgbouncer_auth_schema.sql",
          dest: "00-schema.sql",
        }
      - { source: "stat_extension.sql", dest: "01-extension.sql" }
    
  environment:
    PATH: /usr/lib/postgresql/bin:{{ ansible_env.PATH }}

  tasks:
    # New tasks to ensure git is installed and clone the repository
    - name: Ensure git is installed
      apt:
        name: git
        state: present

    # - name: Clone advaluepartners/postgres repo
    #   git:
    #     repo: 'https://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@github.com/advaluepartners/postgres.git'
    #     dest: /usr/local/src/advaluepartners-postgres
    #     version: main
  
    - set_fact:
        supabase_internal: true
      tags:
        - install-supabase-internal

    - set_fact:
        parallel_jobs: 16
        
    - name: Set system state for user management
      block:
        - name: Ensure nscd is installed (if using glibc)
          apt:
            name: nscd
            state: present
          when: ansible_os_family == "Debian"
          ignore_errors: yes

        - name: Clear system user/group cache
          shell: |
            if command -v nscd >/dev/null 2>&1; then
              nscd -i group
              nscd -i passwd
            fi
            systemctl daemon-reload
          ignore_errors: yes

    - name: Install Postgres from source
      import_tasks: tasks/setup-postgres.yml

    - name: Install PgBouncer
      import_tasks: tasks/setup-pgbouncer.yml
      tags:
        - install-pgbouncer
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Install WAL-G
      import_tasks: tasks/setup-wal-g.yml
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Install Gotrue
      import_tasks: tasks/setup-gotrue.yml
      tags:
        - install-gotrue
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix
      
    - name: Install PostgREST
      import_tasks: tasks/setup-postgrest.yml
      vars:
        postgresql_major: "{{ postgresql_major_version }}"
      tags:
        - install-postgrest
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Install Envoy
      import_tasks: tasks/setup-envoy.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Install Kong
      import_tasks: tasks/setup-kong.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Install nginx
      import_tasks: tasks/setup-nginx.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Install Vector
      import_tasks: tasks/setup-vector.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Install Supabase specific content
      import_tasks: tasks/setup-supabase-internal.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Fix IPv6 NDisc issues
      import_tasks: tasks/fix_ipv6_ndisc.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode

    - name: Start Postgres Database without Systemd
      become: yes
      become_user: postgres
      shell:
        cmd: /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data start
      when: debpkg_mode

    - name: Adjust APT update intervals
      copy:
        src: files/apt_periodic
        dest: /etc/apt/apt.conf.d/10periodic
      when: debpkg_mode or nixpkg_mode
      
    - name: Transfer init SQL files
      copy:
        src: files/{{ item.source }}
        dest: /tmp/{{ item.dest }}
      loop: "{{ sql_files }}"
      when: debpkg_mode or stage2_nix

    - name: Create postgres role
      become: yes
      become_user: postgres
      shell:
        cmd: /usr/lib/postgresql/bin/psql --username=capitala_admin -d postgres -c "create role postgres superuser login; alter database postgres owner to postgres;"
      when: debpkg_mode or stage2_nix

    - name: Execute init SQL files
      become: yes
      become_user: postgres
      shell:
        cmd: /usr/lib/postgresql/bin/psql -f /tmp/{{ item.dest }}
      loop: "{{ sql_files }}"
      when: debpkg_mode or stage2_nix

    - name: Delete SQL scripts
      file:
        path: /tmp/{{ item.dest }}
        state: absent
      loop: "{{ sql_files }}"
      when: debpkg_mode or stage2_nix

    - name: First boot optimizations
      import_tasks: tasks/internal/optimizations.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or stage2_nix
      
    - name: Finalize AMI
      import_tasks: tasks/finalize-ami.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode
      
    - name: Enhance fail2ban
      import_tasks: tasks/setup-fail2ban.yml
      when: debpkg_mode or nixpkg_mode

    - name: Install Admin API
      import_tasks: tasks/internal/admin-api.yml
      tags:
        - install-supabase-internal
      when: debpkg_mode or nixpkg_mode or stage2_nix

    - name: Internal tasks setup
      block:
        - name: Install supautils
          import_tasks: tasks/internal/supautils.yml
        - name: Setup postgresql-prestart
          import_tasks: tasks/internal/postgresql-prestart.yml
        - name: Setup admin-api
          import_tasks: tasks/internal/admin-api.yml
        - name: Install salt
          import_tasks: tasks/internal/install-salt.yml
        - name: Setup pg_egress_collect
          import_tasks: tasks/internal/pg_egress_collect.yml
        - name: Setup admin-mgr
          import_tasks: tasks/internal/admin-mgr.yml
        - name: Setup postgres-exporter
          import_tasks: tasks/internal/postgres-exporter.yml
        - name: Setup nftables
          import_tasks: tasks/internal/setup-nftables.yml
      when: debpkg_mode or nixpkg_mode or stage2_nix
      tags:
        - install-supabase-internal

    - name: install EC2 instance connect
      become: yes
      apt:
        pkg:
          - ec2-instance-connect
      tags:
        - aws-only

    - name: Install security tools
      become: yes
      apt:
        pkg:
          - unattended-upgrades
        update_cache: yes
        cache_valid_time: 3600

    - name: Clean out build dependencies
      import_tasks: tasks/clean-build-dependencies.yml

    - name: Ensure /run/postgresql exists for lock file creation
      become: yes
      file:
        path: /run/postgresql
        state: directory
        owner: postgres
        group: postgres
        mode: '2775'
      when: stage2_nix

    - name: Check if PostgreSQL is running
      become: yes
      become_user: postgres
      shell: /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data status
      args:
        executable: /bin/bash
      register: pg_status
      ignore_errors: yes
      when: stage2_nix

    - name: Force kill PostgreSQL process if running and remove stale PID file
      become: yes
      become_user: postgres
      shell: |
        if [ -f /var/lib/postgresql/data/postmaster.pid ]; then
          PID=$(head -n 1 /var/lib/postgresql/data/postmaster.pid)
          if ps -p $PID > /dev/null 2>&1; then
            echo "PostgreSQL process $PID is still running. Force killing..."
            kill -9 $PID
            sleep 2
          fi
          echo "Removing stale PID file"
          rm -f /var/lib/postgresql/data/postmaster.pid
        fi
      args:
        executable: /bin/bash
      when: stage2_nix

    - name: Ensure PostgreSQL is not running (double-check)
      become: yes
      become_user: postgres
      shell: /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data status
      args:
        executable: /bin/bash
      register: pg_status_after
      ignore_errors: yes
      when: stage2_nix

    - name: Fail if PostgreSQL is still running
      fail:
        msg: "PostgreSQL is still running after force kill; cannot start a new instance."
      when: stage2_nix and (pg_status_after.rc == 0)

    - name: Restart PostgreSQL without Systemd
      become: yes
      become_user: postgres
      ansible.builtin.shell: |
        export LANG=C
        export LANGUAGE=C
        export LC_ALL=C
        export LC_CTYPE=C
        export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
        . /var/lib/postgresql/.bashrc
        /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data start
      args:
        executable: /bin/bash
      when: stage2_nix

    - name: Setup Apache AGE extension (PRODUCTION FIX)
      become: yes
      become_user: postgres
      shell: |
        echo "=== AGE Extension Setup Started ==="
        
        # Wait for PostgreSQL to be fully ready
        echo "Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if psql -d postgres -c "SELECT 1;" > /dev/null 2>&1; then
            echo "PostgreSQL is ready after $i attempts"
            break
          fi
          echo "Attempt $i: PostgreSQL not ready, waiting..."
          sleep 2
          if [ $i -eq 30 ]; then
            echo "ERROR: PostgreSQL failed to become ready after 30 attempts"
            exit 1
          fi
        done
        
        # Verify AGE files exist before trying to create extension
        echo "=== Verifying AGE extension files ==="
        
        REQUIRED_FILES=(
          "/usr/lib/postgresql/lib/age.so"
          "/usr/lib/postgresql/share/postgresql/extension/age.control"
          "/usr/lib/postgresql/share/postgresql/extension/age--1.5.0.sql"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Required file missing: $file"
            echo "Available AGE files:"
            ls -la /usr/lib/postgresql/share/postgresql/extension/age* 2>/dev/null || echo "No AGE extension files found"
            ls -la /usr/lib/postgresql/lib/age* 2>/dev/null || echo "No AGE library found"
            
            # Check if files are still in Nix store but not copied
            echo "Files still in Nix store:"
            find /nix/store -name "age--1.5.0.sql" || echo "Main script not in Nix store either"
            find /nix/store -name "age.control" || echo "Control file not in Nix store either"
            
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done
        
        # Critical verification: check main installation script content
        SCRIPT_SIZE=$(wc -l < "/usr/lib/postgresql/share/postgresql/extension/age--1.5.0.sql")
        if [ "$SCRIPT_SIZE" -lt 100 ]; then
          echo "ERROR: Main installation script too small ($SCRIPT_SIZE lines)"
          echo "This indicates the AGE build process failed to generate the proper script"
          echo "Expected: concatenated content from 16 SQL files (should be several hundred lines)"
          head -20 /usr/lib/postgresql/share/postgresql/extension/age--1.5.0.sql
          exit 1
        fi
        
        echo "✓ Main installation script has $SCRIPT_SIZE lines (proper size)"
        echo "All required AGE files verified successfully"
        
        # Display control file content for debugging
        echo "=== AGE Control File Content ==="
        cat /usr/lib/postgresql/share/postgresql/extension/age.control
        
        # Check available extensions before creation
        echo "=== Checking available extensions ==="
        psql -d postgres -c "SELECT name, default_version, installed_version FROM pg_available_extensions WHERE name LIKE '%age%';"
        
        # Create AGE extension with detailed error handling
        echo "=== Creating AGE extension ==="
        if psql -d postgres -c "CREATE EXTENSION IF NOT EXISTS age CASCADE;" 2>&1; then
          echo "SUCCESS: AGE extension created successfully"
        else
          echo "ERROR: Failed to create AGE extension"
          echo "Checking PostgreSQL logs for errors..."
          tail -20 /var/lib/postgresql/data/log/postgresql*.log 2>/dev/null || echo "No PostgreSQL logs found"
          echo "Checking available extensions again..."
          psql -d postgres -c "SELECT name FROM pg_available_extensions WHERE name LIKE '%age%';"
          echo "Checking installed extensions..."
          psql -d postgres -c "\dx"
          exit 1
        fi
        
        # Load AGE library
        echo "=== Loading AGE library ==="
        if psql -d postgres -c "LOAD 'age';" 2>&1; then
          echo "SUCCESS: AGE library loaded successfully"
        else
          echo "ERROR: Failed to load AGE library"
          exit 1
        fi
        
        # Verify ag_catalog schema exists and set search path
        echo "=== Configuring AGE search path ==="
        psql -d postgres -c "DO \$\$ 
        BEGIN 
          IF EXISTS (SELECT 1 FROM pg_namespace WHERE nspname = 'ag_catalog') THEN 
            EXECUTE 'SET search_path = ag_catalog, \"\$user\", public'; 
            RAISE NOTICE 'AGE extension successfully configured with ag_catalog schema';
          ELSE
            RAISE WARNING 'ag_catalog schema not found - this may indicate AGE installation issues';
          END IF; 
        END \$\$;" 2>&1
        
        # Final verification of AGE installation
        echo "=== Final AGE Installation Verification ==="
        
        # Check extension is installed
        EXT_CHECK=$(psql -d postgres -t -c "SELECT extname, extversion FROM pg_extension WHERE extname = 'age';")
        if [ -n "$EXT_CHECK" ]; then
          echo "SUCCESS: AGE extension is installed: $EXT_CHECK"
        else
          echo "ERROR: AGE extension not found in pg_extension"
          psql -d postgres -c "\dx"
          exit 1
        fi
        
        # Check ag_catalog schema exists
        SCHEMA_CHECK=$(psql -d postgres -t -c "SELECT nspname FROM pg_namespace WHERE nspname = 'ag_catalog';")
        if [ -n "$SCHEMA_CHECK" ]; then
          echo "SUCCESS: ag_catalog schema exists"
        else
          echo "WARNING: ag_catalog schema not found"
        fi
        
        # Test basic AGE functionality
        echo "=== Testing basic AGE functionality ==="
        if psql -d postgres -c "SELECT ag_catalog.create_graph('test_graph');" 2>&1; then
          echo "SUCCESS: AGE basic functionality test passed"
          # Clean up test graph
          psql -d postgres -c "SELECT ag_catalog.drop_graph('test_graph', true);" 2>/dev/null || true
        else
          echo "WARNING: AGE basic functionality test failed, but extension is installed"
        fi
        
        echo "=== AGE Extension Setup Completed Successfully ==="
      args:
        executable: /bin/bash
      when: stage2_nix and postgresql_major_version == "15"
      register: age_setup_production
      changed_when: "'CREATE EXTENSION' in age_setup_production.stdout"
      failed_when: age_setup_production.rc != 0

    - name: Setup and add extensions
      import_tasks: tasks/setup-extensions.yml
      when: stage2_nix

    - name: Check if PostgreSQL PID file exists
      stat:
        path: /var/lib/postgresql/data/postmaster.pid
      register: pg_pid_file
      when: stage2_nix

    - name: Stop Postgres Database without Systemd (force shutdown)
      become: yes
      become_user: postgres
      shell: /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data stop -m immediate
      args:
        executable: /bin/bash
      when: stage2_nix and pg_pid_file.stat.exists

    - name: Run unit tests
      import_tasks: tasks/test-image.yml
      tags:
        - unit-tests
      when: debpkg_mode or stage2_nix

    - name: Collect Postgres binaries
      import_tasks: tasks/internal/collect-pg-binaries.yml
      tags:
        - collect-binaries
      when: debpkg_mode

    - name: Install osquery from nixpkgs binary cache
      become: yes
      shell: |
        sudo -u ubuntu bash -c ". /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh && nix profile install github:nixos/nixpkgs/f98ec4f73c762223d62bee706726138cb6ea27cc#osquery"
      when: stage2_nix

    - name: Pre-check before osquery - Verify system state  
      shell: |
        echo "=== Final System State Check ==="
        echo "User details:"
        id pgbouncer
        echo "\nGroup memberships:"
        for group in postgres ssl-cert pgbouncer; do
          echo "$group:" $(getent group $group)
        done
      args:
        executable: /bin/bash
      register: final_system_check

    - name: Display final system state
      debug:
        var: final_system_check.stdout_lines

    - name: Ensure pgbouncer has correct group memberships
      fail:
        msg: "pgbouncer user is missing required group memberships"
      when: >
        final_system_check.stdout is not search('postgres') or
        final_system_check.stdout is not search('ssl-cert') or
        final_system_check.stdout is not search('pgbouncer')

    # - name: Run osquery permission checks
    #   become: yes
    #   shell: |
    #     sudo -u ubuntu bash -c ". /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh && /usr/bin/python3 /tmp/ansible-playbook/ansible/files/permission_check.py"
    #   when: stage2_nix

    # ✅ SAFE VERSION: Non-blocking permission checks with comprehensive error handling
    - name: Check if osquery is available
      shell: |
        sudo -u ubuntu bash -c ". /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh && which osqueryi"
      register: osquery_available
      failed_when: false
      changed_when: false
      when: stage2_nix

    - name: Check if permission check script exists
      stat:
        path: /tmp/ansible-playbook/ansible/files/permission_check.py
      register: permission_script_exists
      when: stage2_nix

    - name: Run osquery permission checks
      become: yes
      shell: |
        echo "=== Starting osquery permission validation ==="
        sudo -u ubuntu bash -c ". /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh && /usr/bin/python3 /tmp/ansible-playbook/ansible/files/permission_check.py"
      register: osquery_permission_result
      failed_when: false  # ✅ CRITICAL: Never fail the build on permission issues
      changed_when: false
      when: 
        - stage2_nix
        - osquery_available.rc == 0
        - permission_script_exists.stat.exists
      timeout: 300  # 5 minute timeout for safety

    - name: Report osquery permission check results
      debug:
        msg: |
          🔍 osquery Permission Check Results:
          {% if osquery_available.rc != 0 %}
          ⚠️  osquery not available - permission checks skipped
          {% elif not permission_script_exists.stat.exists %}
          ⚠️  Permission check script not found - checks skipped
          {% elif osquery_permission_result.rc == 0 %}
          ✅ All permission checks passed successfully
          {% else %}
          ⚠️  Some permission issues detected (non-critical):
          {{ osquery_permission_result.stdout | default('No output') }}
          
          This is informational only and won't affect the build.
          {% endif %}
      when: stage2_nix

    - name: Display permission check details (when available)
      debug:
        var: osquery_permission_result.stdout_lines
      when: 
        - stage2_nix
        - osquery_permission_result is defined
        - osquery_permission_result.stdout is defined

    - name: Log permission check issues for investigation (if any)
      debug:
        msg: |
          📝 Permission Check Details for Investigation:
          - Exit Code: {{ osquery_permission_result.rc | default('N/A') }}
          - stderr: {{ osquery_permission_result.stderr | default('None') }}
          
          Note: These issues do not affect the build and are for informational purposes only.
      when: 
        - stage2_nix
        - osquery_permission_result is defined
        - osquery_permission_result.rc != 0

    - name: Remove osquery
      become: yes
      shell: |
        sudo -u ubuntu bash -c ". /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh && nix profile remove osquery"
      when: stage2_nix

    - name: nix collect garbage
      become: yes
      shell: |
        sudo -u ubuntu bash -c ". /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh && nix-collect-garbage -d"
      when: stage2_nix
