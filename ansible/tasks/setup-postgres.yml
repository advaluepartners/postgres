- name: Debug - PostgreSQL pre-setup
  shell: |
    echo "=== System State ==="
    echo "Groups:"
    getent group postgres ssl-cert || echo "Groups not found"
    echo "====="
  register: pre_postgres_debug
  changed_when: false

- name: Show PostgreSQL pre-setup debug
  debug:
    var: pre_postgres_debug.stdout_lines

- name: Postgres - copy package
  copy:
    src: files/postgres/
    dest: /tmp/build/
  when: debpkg_mode

- name: Postgres - add PPA
  apt_repository:
    repo: "deb [ trusted=yes ] file:///tmp/build ./"
    state: present
  when: debpkg_mode

- name: Postgres - install commons
  apt:
    name: postgresql-common
    install_recommends: no
  when: debpkg_mode

- name: Do not create main cluster
  shell:
    cmd: sed -ri 's/#(create_main_cluster) .*$/\1 = false/' /etc/postgresql-common/createcluster.conf
  when: debpkg_mode

- name: Postgres - install server
  apt:
    name: postgresql-{{ postgresql_major }}={{ postgresql_release }}-1.pgdg20.04+1
    install_recommends: no
  when: debpkg_mode

- name: Postgres - remove PPA
  apt_repository:
    repo: "deb [ trusted=yes ] file:///tmp/build ./"
    state: absent
  when: debpkg_mode

- name: Postgres - cleanup package
  file:
    path: /tmp/build
    state: absent
  when: debpkg_mode

- name: install locales
  apt:
    name: locales
    state: present
  become: yes
  when: stage2_nix

- name: configure locales
  copy:
    dest: /etc/locale.gen
    content: |
      C.UTF-8 UTF-8
      en_US.UTF-8 UTF-8
  become: yes
  when: stage2_nix

- name: locale-gen
  command: sudo locale-gen
  when: stage2_nix

- name: update-locale
  command: sudo update-locale
  when: stage2_nix

- name: Ensure required locales are installed
  become: yes
  shell: |
    apt-get update
    apt-get install -y locales
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
    locale-gen
    update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8
  when: stage2_nix

- name: Create symlink to /usr/lib/postgresql/bin
  shell:
    cmd: ln -s /usr/lib/postgresql/{{ postgresql_major }}/bin /usr/lib/postgresql/bin
  when: debpkg_mode

- name: Ensure PostgreSQL include/server directory exists
  file:
    path: /usr/lib/postgresql/include/server
    state: directory
    owner: postgres
    group: postgres
    mode: '0755'
  when: stage2_nix


- name: Create symlinks for PostgreSQL headers
  shell: |
    ln -sf /var/lib/postgresql/.nix-profile/include/* /usr/lib/postgresql/include/server/
  become: yes
  when: stage2_nix

- name: Create symbolic links for PostgreSQL header files
  file:
    src: "{{ item }}"
    dest: "/usr/lib/postgresql/include/server/{{ item | basename }}"
    state: link
  with_fileglob:
    - "/var/lib/postgresql/.nix-profile/include/*.h"
  become: yes
  when: stage2_nix


# - name: create ssl-cert group
#   group:
#     name: ssl-cert
#     state: present
#   when: nixpkg_mode

# - name: create postgres group
#   group:
#     name: postgres
#     state: present
#   when: nixpkg_mode

# - name: create postgres user
#   shell: adduser --system  --home /var/lib/postgresql --no-create-home --shell /bin/bash --group --gecos "PostgreSQL administrator" postgres
#   args:
#     executable: /bin/bash
#   become: yes
#   when: nixpkg_mode

# - name: add postgres user to postgres group
#   shell: usermod -a -G ssl-cert postgres
#   args:
#     executable: /bin/bash
#   become: yes
#   when: nixpkg_mode

- name: create ssl-cert group
  group:
    name: ssl-cert
    state: present
    gid: 1001
  when: nixpkg_mode

- name: create postgres group
  group:
    name: postgres
    state: present
    gid: 1002
  when: nixpkg_mode

- name: Create postgres user and set primary group
  user:
    name: postgres
    system: yes
    home: /var/lib/postgresql
    shell: /bin/bash
    group: postgres
    groups: []
  when: nixpkg_mode

- name: Add postgres to additional groups
  user:
    name: postgres
    group: postgres
    groups: ssl-cert
    append: yes
  when: nixpkg_mode

- name: Verify postgres user groups
  shell: |
    echo "=== Verifying postgres user groups ==="
    id postgres
    echo "Group memberships:"
    getent group postgres
    getent group ssl-cert
  register: verify_postgres
  changed_when: false
  when: nixpkg_mode

- name: Show verification results
  debug:
    var: verify_postgres.stdout_lines
  when: nixpkg_mode

- name: Force system to recognize group changes
  shell: |
    # Reload system group cache
    systemctl daemon-reload
    # Force group membership update
    pkill -SIGHUP -u postgres || true
  changed_when: false
  when: nixpkg_mode

- name: Create relevant directories
  file:
    path: '{{ item }}'
    recurse: yes
    state: directory
    owner: postgres
    group: postgres
  with_items:
    - '/home/postgres'
    - '/var/log/postgresql'
    - '/var/lib/postgresql'
  when: debpkg_mode or nixpkg_mode

- name: Allow adminapi to write custom config
  file:
    path: '{{ item }}'
    recurse: yes
    state: directory
    owner: postgres
    group: postgres
    mode: 0775
  with_items:
    - '/etc/postgresql'
    - '/etc/postgresql-custom'
  when: debpkg_mode or nixpkg_mode

- name: create placeholder config files
  file:
    path: '/etc/postgresql-custom/{{ item }}'
    state: touch
    owner: postgres
    group: postgres
    mode: 0664
  with_items:
    - 'generated-optimizations.conf'
    - 'custom-overrides.conf'
  when: debpkg_mode or nixpkg_mode

# Move Postgres configuration files into /etc/postgresql
# Add postgresql.conf
- name: import postgresql.conf
  template:
    src: files/postgresql_config/postgresql.conf.j2
    dest: /etc/postgresql/postgresql.conf
    group: postgres
  when: debpkg_mode or nixpkg_mode

# Add pg_hba.conf
- name: import pg_hba.conf
  template:
    src: files/postgresql_config/pg_hba.conf.j2
    dest: /etc/postgresql/pg_hba.conf
    group: postgres
  when: debpkg_mode or nixpkg_mode

# Add pg_ident.conf
- name: import pg_ident.conf
  template:
    src: files/postgresql_config/pg_ident.conf.j2
    dest: /etc/postgresql/pg_ident.conf
    group: postgres
  when: debpkg_mode or nixpkg_mode

# Add custom config for read replicas set up
- name: Move custom read-replica.conf file to /etc/postgresql-custom/read-replica.conf
  template:
    src: "files/postgresql_config/custom_read_replica.conf.j2"
    dest: /etc/postgresql-custom/read-replica.conf
    mode: 0664
    owner: postgres
    group: postgres
  when: debpkg_mode or nixpkg_mode

# Install extensions before init
- name: Install Postgres extensions
  import_tasks: tasks/setup-docker.yml
  when: debpkg_mode or stage2_nix


#stage 2 postgres tasks
- name: stage2 postgres tasks
  import_tasks: tasks/stage2-setup-postgres.yml
  when: stage2_nix

- name: Create directory on data volume
  file:
    path: '{{ item }}'
    recurse: yes
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  with_items:
    - "/data/pgdata"
  when: debpkg_mode or nixpkg_mode

- name: Link database data_dir to data volume directory
  file:
    src: "/data/pgdata"
    path: "/var/lib/postgresql/data"
    state: link
    force: yes
  when: debpkg_mode or nixpkg_mode

### Test1 Block Sunday 23 -- added the below 
- name: Debug pg_config sharedir
  shell: "/usr/bin/pg_config --sharedir"
  register: pg_config_sharedir
  become: yes
  when: stage2_nix

- name: Display pg_config sharedir
  debug:
    var: pg_config_sharedir.stdout
  when: stage2_nix

- name: Debug pg_config from bin directory
  shell: "/usr/lib/postgresql/bin/pg_config --sharedir"
  register: pg_config_bin_sharedir
  become: yes
  when: stage2_nix

- name: Display pg_config from bin directory
  debug:
    var: pg_config_bin_sharedir.stdout
  when: stage2_nix

- name: Ensure extension directory exists
  file:
    path: "/usr/lib/postgresql/share/postgresql/extension"
    state: directory
    owner: postgres
    group: postgres
    mode: '0755'
  become: yes
  when: stage2_nix

- name: Debug source extension directory
  shell: "ls -l /var/lib/postgresql/.nix-profile/share/postgresql/extension/"
  register: source_ext_debug
  become: yes
  when: stage2_nix

- name: Display source extension directory contents
  debug:
    var: source_ext_debug.stdout_lines
  when: stage2_nix

- name: Copy extension files from Nix profile
  shell: |
    cp -rf /var/lib/postgresql/.nix-profile/share/postgresql/extension/* /usr/lib/postgresql/share/postgresql/extension/
  become: yes
  when: stage2_nix

# - name: Set ownership of extension files
#   file:
#     path: "/usr/lib/postgresql/share/postgresql/extension"
#     owner: postgres
#     group: postgres
#     recurse: yes
#   become: yes
#   when: stage2_nix

- name: Set ownership and permissions of extension files
  file:
    path: "/usr/lib/postgresql/share/postgresql/extension"
    owner: postgres
    group: postgres
    mode: '0755'
    recurse: yes
  become: yes
  when: stage2_nix


- name: Debug plpgsql.control file status
  shell: "ls -l /usr/lib/postgresql/share/postgresql/extension/plpgsql.control || echo 'File not found'"
  register: plpgsql_file_debug
  become: yes
  when: stage2_nix

- name: Display plpgsql.control file details
  debug:
    var: plpgsql_file_debug.stdout
  when: stage2_nix


- name: Debug extension file status
  shell: "ls -l /usr/lib/postgresql/share/postgresql/extension/uuid-ossp.control || echo 'File not found'"
  register: ext_file_debug
  become: yes
  when: stage2_nix

- name: Display extension file details
  debug:
    var: ext_file_debug.stdout
  when: stage2_nix

- name: Test access to plpgsql.control
  become: yes
  become_user: postgres
  shell: "cat /usr/lib/postgresql/share/postgresql/extension/plpgsql.control > /dev/null || echo 'Access denied'"
  register: access_test
  ignore_errors: yes
  when: stage2_nix

- name: Display access test result
  debug:
    var: access_test.stdout
  when: stage2_nix

- name: Debug parent directory permissions
  shell: "ls -ld /usr/lib/postgresql /usr/lib/postgresql/share /usr/lib/postgresql/share/postgresql /usr/lib/postgresql/share/postgresql/extension"
  register: parent_dir_debug
  become: yes
  when: stage2_nix

- name: Display parent directory permissions
  debug:
    var: parent_dir_debug.stdout_lines
  when: stage2_nix


### Test1 Block Sunday 23 -- added the below 

### last added
- name: Ensure parent directories are accessible
  file:
    path: "{{ item }}"
    state: directory
    owner: postgres
    group: postgres
    mode: '0755'
  loop:
    - "/usr/lib/postgresql"
    - "/usr/lib/postgresql/share"
    - "/usr/lib/postgresql/share/postgresql"
    - "/usr/lib/postgresql/share/postgresql/extension"
  become: yes
  when: stage2_nix

- name: Test access to plpgsql.control
  become: yes
  become_user: postgres
  shell: "cat /usr/lib/postgresql/share/postgresql/extension/plpgsql.control > /dev/null || echo 'Access denied'"
  register: access_test
  ignore_errors: yes
  when: stage2_nix

- name: Display access test result
  debug:
    var: access_test.stdout
  when: stage2_nix

- name: Initialize the database
  become: yes
  become_user: postgres
  shell: /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data initdb -o "--allow-group-access" -o "--username=supabase_admin"
  vars:
    ansible_command_timeout: 60
  when: debpkg_mode

- name: Check psql_version and modify supautils.conf and postgresql.conf if necessary
  block:
    - name: Check if psql_version is psql_orioledb
      set_fact:
        is_psql_oriole: "{{ psql_version in ['psql_orioledb-16', 'psql_orioledb-17'] }}"

    ##  Wednesday 26th -- capitala config -- 
    # - name: Initialize the database stage2_nix (non-orioledb)
    #   become: yes
    #   become_user: postgres
    #   shell: source /var/lib/postgresql/.bashrc && /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data initdb -o "--allow-group-access" -o "--username=supabase_admin"
    #   args:
    #     executable: /bin/bash
    #   environment:
    #     LANG: en_US.UTF-8
    #     LANGUAGE: en_US.UTF-8
    #     LC_ALL: en_US.UTF-8
    #     LC_CTYPE: en_US.UTF-8
    #     LOCALE_ARCHIVE: /usr/lib/locale/locale-archive
    #   vars:
    #     ansible_command_timeout: 60
    #   when: stage2_nix and not is_psql_oriole

    - name: Initialize the database stage2_nix (non-orioledb)
      become: yes
      become_user: postgres
      shell: source /var/lib/postgresql/.bashrc && /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data initdb -o "--allow-group-access" -o "--username=supabase_admin" -o "--locale=C"
      args:
        executable: /bin/bash
      environment:
        LANG: C
        LC_ALL: C
      vars:
        ansible_command_timeout: 60
      when: stage2_nix and not is_psql_oriole

    # - name: Initialize the database stage2_nix (orioledb)
    #   become: yes
    #   become_user: postgres
    #   shell: >
    #     source /var/lib/postgresql/.bashrc && initdb -D /var/lib/postgresql/data 
    #     --allow-group-access 
    #     --username=supabase_admin 
    #     --locale-provider=icu 
    #     --encoding=UTF-8 
    #     --icu-locale=en_US.UTF-8 
    #   args:
    #     executable: /bin/bash
    #   environment:
    #     LANG: en_US.UTF-8
    #     LANGUAGE: en_US.UTF-8
    #     LC_ALL: en_US.UTF-8
    #     LC_CTYPE: en_US.UTF-8
    #     LOCALE_ARCHIVE: /usr/lib/locale/locale-archive
    #   vars:
    #     ansible_command_timeout: 60
    #   when: stage2_nix and is_psql_oriole

- name: Initialize the database stage2_nix (orioledb)
  become: yes
  become_user: postgres
  shell: >
    source /var/lib/postgresql/.bashrc && initdb -D /var/lib/postgresql/data 
    --allow-group-access 
    --username=supabase_admin 
    --locale=C
    --encoding=UTF8
  args:
    executable: /bin/bash
  environment:
    LANG: C
    LC_ALL: C
  vars:
    ansible_command_timeout: 60
  when: stage2_nix and is_psql_oriole

- name: Ensure postgresql.conf uses C locale
  become: yes
  lineinfile:
    path: /etc/postgresql/postgresql.conf
    line: "{{ item }}"
    state: present
  with_items:
    - "lc_messages = 'C'"
    - "lc_monetary = 'C'"
    - "lc_numeric = 'C'"
    - "lc_time = 'C'"
  when: stage2_nix

############ Wednesday 26th Capital a 

- name: Create systemd service file for PostgreSQL
  become: yes
  template:
    src: /tmp/ansible-playbook/ansible/files/postgresql_config/postgresql.service.j2
    dest: /etc/systemd/system/postgresql.service
    owner: root
    group: root
    mode: '0644'
  when: stage2_nix

- name: Reload systemd daemon
  become: yes
  systemd:
    daemon_reload: yes
  when: stage2_nix

- name: copy PG systemd unit
  template:
    src: files/postgresql_config/postgresql.service.j2
    dest: /etc/systemd/system/postgresql.service
  when: debpkg_mode or stage2_nix

- name: copy optimizations systemd unit
  template:
    src: files/database-optimizations.service.j2
    dest: /etc/systemd/system/database-optimizations.service
  when: debpkg_mode or stage2_nix

- name: Ensure /run/postgresql exists for lock file creation
  become: yes
  file:
    path: /run/postgresql
    state: directory
    owner: postgres
    group: postgres
    mode: '2775'
  when: stage2_nix

- name: Check if PostgreSQL PID file exists
  stat:
    path: /var/lib/postgresql/data/postmaster.pid
  register: pg_pid_file
  when: stage2_nix

- name: Stop Postgres Database without Systemd (force shutdown)
  become: yes
  become_user: postgres
  shell: /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data stop -m immediate
  args:
    executable: /bin/bash
  when: stage2_nix and pg_pid_file.stat.exists

- name: Restart Postgres Database without Systemd
  become: yes
  become_user: postgres
  ansible.builtin.shell: |
    # Export environment variables inline
    # export LANG=en_US.UTF-8
    # export LANGUAGE=en_US:en
    # export LC_ALL=en_US.UTF-8
    # export LC_CTYPE=en_US.UTF-8
    export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
    export LANG=C
    export LANGUAGE=C
    export LC_ALL=C
    export LC_CTYPE=C
    export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive
    # Use the POSIX “.” operator instead of “source”
    . /var/lib/postgresql/.bashrc
    /usr/lib/postgresql/bin/pg_ctl -D /var/lib/postgresql/data start
  args:
    executable: /bin/bash
  when: stage2_nix


# Reload
- name: System - systemd reload
  systemd:
    enabled: yes
    name: postgresql
    daemon_reload: yes
  when: debpkg_mode or stage2_nix

- name: Make sure .bashrc exists
  file: 
    path: /var/lib/postgresql/.bashrc 
    state: touch
    owner: postgres
    group: postgres
  when: nixpkg_mode 

- name: Add LOCALE_ARCHIVE to .bashrc
  lineinfile:
    dest: "/var/lib/postgresql/.bashrc"
    line: 'export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive'
    create: yes
  become: yes
  when: nixpkg_mode

- name: Add LANG items to .bashrc
  lineinfile:
    dest: "/var/lib/postgresql/.bashrc"
    line: "{{ item }}"
  loop: 
    - 'export LANG="en_US.UTF-8"'
    - 'export LANGUAGE="en_US.UTF-8"'
    - 'export LC_ALL="en_US.UTF-8"'
    - 'export LANG="en_US.UTF-8"'
    - 'export LC_CTYPE="en_US.UTF-8"'
  become: yes
  when: nixpkg_mode

- name: Ensure pg_config symlink points to nix installation
  file:
    src: "/var/lib/postgresql/.nix-profile/bin/pg_config"
    dest: "/usr/bin/pg_config"
    state: link
    force: yes
  when: stage2_nix